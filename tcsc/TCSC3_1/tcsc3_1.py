
from asyncio import sleep

from app.test_engine.logger import test_engine_logger as logger
from app.test_engine.models import TestCase, TestStep
from app.user_prompt_support.prompt_request import PromptRequest
from app.user_prompt_support.user_prompt_manager import (
    PromptExchange,
    user_prompt_manager,
)


class TCSC3_1(TestCase):

    metadata = {
        "public_id": "TCSC3_1",
        "version": "0.0.1",
        "title": "",
        "description": "",
    }

    def create_test_steps(self) -> None:
        self.test_steps = [
            TestStep("Test Step 4.12.2 Initiator: Initiator constructs and sends a TLV-encoded Sigma1 message containing a random initiation value, destination identifier, session identifier, and the public key for its ephemeral key pair."),
            TestStep(
                "Test Step Responder: Responder validates the destination identifier contained in the message."),
            TestStep("Test Step Responder: Responder constructs and sends a TLV-encoded Sigma2 message containing a random responder value, responder session id, trusted root id, public key for its responder ephemeral key pair, and encrypted integrity data."),
            TestStep("Test Step Initiator: Initiator validates that the trusted root id in the message is contained in its list of trusted root ids."),
            TestStep(
                "Test Step Initiator: Initiator decrypts and verifies the message integrity data."),
            TestStep(
                "Test Step Initiator: Initiator constructs and sends a TLV-encoded Sigma3 message containing encrypted integrity data."),
            TestStep(
                "Test Step Responder: Responder decrypts and verifies the message integrity data."),
        ]

    async def setup(self) -> None:
        logger.info("No setup")

    async def execute(self) -> None:
        # 4.12.2 Initiator: Initiator constructs and sends a TLV-encoded Sigma1 message containing a random initiation value, destination identifier, session identifier, and the public key for its ephemeral key pair.
        # Responder receives the message
        #
        logger.info("4.12.2 Initiator: Initiator constructs and sends a TLV-encoded Sigma1 message containing a random initiation value, destination identifier, session identifier, and the public key for its ephemeral key pair.")
        self.next_step()

        # Responder: Responder validates the destination identifier contained in the message.
        # If the destination identifier matches a candidate destination id (as generated by the process in spec section 4
        # 12
        # 2
        # 4
        # 2), the responder proceeds to generate a Sigma 2 message
        #
        # If the destination identifier does not match any candidate destination ids, then the responder sends a SigmaError message with the NoSharedTrustRoots error code and no performs no further processing
        #
        logger.info(
            "Responder: Responder validates the destination identifier contained in the message.")
        self.next_step()

        # Responder: Responder constructs and sends a TLV-encoded Sigma2 message containing a random responder value, responder session id, trusted root id, public key for its responder ephemeral key pair, and encrypted integrity data.
        # Initiator receives the message
        #
        logger.info("Responder: Responder constructs and sends a TLV-encoded Sigma2 message containing a random responder value, responder session id, trusted root id, public key for its responder ephemeral key pair, and encrypted integrity data.")
        self.next_step()

        # Initiator: Initiator validates that the trusted root id in the message is contained in its list of trusted root ids.
        # If the trusted root id matches on in the initiatorâ€™s trusted roots list, then it proceeds to the next step to decrypt the integrity data
        #
        # If the trusted root id is not found, then the initiator sends a SigmaError message with the NoSharedTrustRoots error code and performs no further processing
        #
        logger.info(
            "Initiator: Initiator validates that the trusted root id in the message is contained in its list of trusted root ids.")
        self.next_step()

        # Initiator: Initiator decrypts and verifies the message integrity data.
        # If the verification succeeds, the initiator moves to the next step to send a Sigma3 message
        #
        # If the verification fails, the initiator sends a SigmaError message with the InvalidParameter error code
        #
        logger.info(
            "Initiator: Initiator decrypts and verifies the message integrity data.")
        self.next_step()

        # Initiator: Initiator constructs and sends a TLV-encoded Sigma3 message containing encrypted integrity data.
        # Responder receives the message
        #
        logger.info(
            "Initiator: Initiator constructs and sends a TLV-encoded Sigma3 message containing encrypted integrity data.")
        self.next_step()

        # Responder: Responder decrypts and verifies the message integrity data.
        # If the verification succeeds, the session is established
        #
        # If the verification fails, the responder sends a SigmaError message with the InvalidParameter error code
        #
        logger.info(
            "Responder: Responder decrypts and verifies the message integrity data.")
        self.next_step()

    async def cleanup(self) -> None:
        logger.info("No cleanup")
